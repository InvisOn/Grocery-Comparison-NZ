
stages:
  - setup        # Initial stage: install dependencies
  - test         # Stage for unit and component integration tests
  - e2e          # Stage for end-to-end tests
  - lint

eslint:
  stage: lint
  image: node:latest
  before_script:
    - npm install
  script:
    - npm run lint
  only:
    - merge_requests
    - branches

# Step 1: Install dependencies
setup:
  stage: setup
  image: node:16   # Use Node.js environment for dependencies installation
  script:
    - npm install  # Install all required packages for testing
  artifacts:       # Save the node_modules folder for subsequent jobs
    paths:
      - node_modules/

# Step 2: Frontend Unit and Component Integration Tests with Jest
frontend-jest:
  stage: test
  image: node:16   # Use Node.js environment for running frontend tests
  script:
    - npm run test:frontend  # Run Jest tests for frontend
  artifacts:       # Save coverage report
    paths:
      - coverage/frontend/
    when: always    # Always keep the artifacts, even if the job fails

# Step 3: Backend Unit and Component Integration Tests with Jest and Supertest
backend-jest:
  stage: test
  image: node:16   # Use Node.js environment for backend tests
  script:
    - npm run test:backend  # Run Jest and Supertest tests for backend
  artifacts:       # Save backend coverage report
    paths:
      - coverage/backend/
    when: always

# Step 4: Frontend End-to-End Tests with Maestro
frontend-e2e-maestro:
  stage: e2e
  image: maestroqa/maestro-cli:latest # Use Maestro CLI for mobile testing
  before_script:
    - mkdir -p maestro-artifacts       # Create a folder for storing test results
    - export ANDROID_HOME=/sdk/android # Configure Android SDK environment
  script:
    - maestro test mobile/maestro/register_test.yaml --output maestro-artifacts # Run Maestro E2E tests
  artifacts:       # Save Maestro test results
    paths:
      - maestro-artifacts/
    when: always

# Step 5: Backend End-to-End Tests with Cypress
backend-e2e-cypress:
  stage: e2e
  image: cypress/included:12.6.0  # Use Cypress Docker image with pre-installed dependencies
  script:
    - cypress run --config-file cypress.json # Run Cypress tests
  artifacts:       # Save Cypress test results
    paths:
      - cypress/results/
    when: always
