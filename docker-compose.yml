services:
  fullstack_client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: fullstack_client
    restart: unless-stopped
    volumes:
      - ./client/src:/client/src
    ports:
      - "5173:5173"
    depends_on:
      - fullstack_server
      - fullstack_db
    networks:
      - project_network
    env_file:
      - ./client/.env

  fullstack_server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: fullstack_server
    restart: unless-stopped
    volumes:
      - ./server/src:/server/src
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - ./server/.env
    depends_on:
      - fullstack_db
    networks:
      - project_network

  fullstack_db:
    image: postgres:17.2
    container_name: fullstack_db
    restart: always
    env_file:
      - ./server/.env
    volumes:
      - cosc680-db:/var/lib/postgresql/data  
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - project_network
    
  db_migrate:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: db_migrate
    depends_on:
      fullstack_db:
        condition: service_healthy
    env_file:
      - ./server/.env
    command: sh -c "npm run db:generate && npm run db:push"
    volumes:
      - ./server/src:/server/src
    networks:
      - project_network

  pgadmin:
      image: dpage/pgadmin4
      container_name: pgadmin4_container
      restart: always
      ports:
        - "8888:80"
      env_file:
        - ./server/.env
      volumes:
        - pgadmin-data:/var/lib/pgadmin
      networks:
        - project_network 

volumes:
  cosc680-db:
  pgadmin-data:

networks:
  project_network:



