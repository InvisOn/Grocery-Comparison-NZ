services:
  fullstack_db:
    container_name: fullstack_db
    image: postgres:17.2
    restart: always
    env_file:
      - ./server/.env
    volumes:
      - cosc680-db:/var/lib/postgresql/data  
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - project_network
    
  db_migrate:
    container_name: db_migrate
    depends_on:
      fullstack_db:
        condition: service_healthy
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    command: sh -c "npm run db:generate && npm run db:push"
    networks:
      - project_network

  fullstack_server:
    container_name: fullstack_server
    depends_on:
      db_migrate:
        condition: service_completed_successfully
      fullstack_db:
        condition: service_healthy
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./server/src:/server/src
    healthcheck:
        test: [ "CMD", "curl", "--fail", "-G", "http://localhost:${PORT}" ]
        interval: 30s
        timeout: 10s
        retries: 30
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - ./server/.env
    networks:
      - project_network

  pgadmin:
      container_name: pgadmin4_container
      image: dpage/pgadmin4
      restart: always
      ports:
        - "8888:80"
      env_file:
        - ./server/.env
      volumes:
        - pgadmin-data:/var/lib/pgadmin
      networks:
        - project_network 

  fullstack_client:
    container_name: fullstack_client
    depends_on:
      db_migrate:
        condition: service_completed_successfully
      fullstack_db:
        condition: service_healthy
      fullstack_server:
        condition: service_healthy
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./client/.env
    ports:
      - "5173:5173"
    volumes:
      - ./client/src:/client/src
    networks:
      - project_network

  web_scraper:   
      build:
        context: ./server  
        dockerfile: Dockerfile   
      container_name: web_scraper_container 
      depends_on:
        db_migrate:
          condition: service_completed_successfully
        fullstack_server:
          condition: service_healthy 
      volumes:
        - ./server/src/web-scraping:/server/src/web-scraping
      env_file:
        - ./server/.env 
      command: ["npm", "run", "scrape"]
      networks:
        - project_network


volumes:
  cosc680-db:
  pgadmin-data:

networks:
  project_network:
